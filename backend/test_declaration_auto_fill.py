"""
Comprehensive test of the auto-fill declaration system
Tests the complete workflow from document upload to auto-filled declaration
"""

import asyncio
import json
from services.declaration_generation_service import DeclarationGenerationService
from core.database import get_db
from models.declaration_template import DeclarationTemplate
from templates.exact_russian_declaration_template import create_exact_russian_declaration

# Sample OCR text from the Russian customs declaration photos
SAMPLE_DECLARATION_TEXT = """
–ì–†–£–ó–û–í–ê–Ø –¢–ê–ú–û–ñ–ï–ù–ù–ê–Ø –î–ï–ö–õ–ê–†–ê–¶–ò–Ø –ê EDN635126 –¢–î 1

2 –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä
"GIGAFLEX ASIA LIMITED", –ì–æ–Ω–∫–æ–Ω–≥-—é–Ω–∏—Ç 706,7 —ç—Ç.,–°–∞—É—Ñ –°–∏–ø –¶–µ–Ω—Ç—Ä,–ë–∞—à–Ω—è
–ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é:

8 –ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ò–º–ø–æ—Ä—Ç–µ—Ä
–û–û–û "GAZ-NEFT-AVTO BENZIN"
–≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ê. –§–∏—Ç—Ä–∞—Ç, 157/7

14 –î–µ–∫–ª–∞—Ä–∞–Ω—Ç/–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å
–ß–ü "DS GLOBAL"
–†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –≥.–¢–∞—à–∫–µ–Ω—Ç,–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω —É–ª.–§–∞—Ä–≥–æ–Ω–∞ –±—É–π–∏ 256 –∫–≤ 48 –ø–ª

15 –°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–ö–ê–ó–ê–•–°–¢–ê–ù

18 –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
–ñ–î 73054884

21 –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
–ñ–î 73054884

22 –í–∞–ª—é—Ç–∞ –∏ –æ–±—â–∞—è —Ñ–∞–∫—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
45105.63

23 –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã
1 / 12658.14

29 –¢–∞–º–æ–∂–Ω—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ 26013

30 –ú–µ—Å—Ç–æ –¥–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
1726283 –≥. –¢–∞—à–∫–µ–Ω—Ç, –°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω

31 –ì—Ä—É–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
1 1. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –±–µ–Ω–∑–∏–Ω –Ω–µ—ç—Ç–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ö5 –º–∞—Ä–∫–∏ –ê–ò-95-–ö5
—Ç–æ–Ω: 79.6560 1000 –ª, –≤–µ—Å: 58276 –∫–≥

32 –¢–æ–≤–∞—Ä ‚Ññ 1
33 –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞ 2710124500
35 –í–µ—Å –±—Ä—É—Ç—Ç–æ (–∫–≥) 58276
38 –í–µ—Å –Ω–µ—Ç—Ç–æ (–∫–≥) 58276

40 –û–±—â–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è/–ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
26010 / 29.05.2025 / 0031350

42 –§–∞–∫—Ç—É—Ä. —Å—Ç–æ–∏–º. —Ç-—Ä–∞ 45105.63

47 –ò—Å—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—à–ª–∏–Ω –∏ —Å–±–æ—Ä–æ–≤
–í–∏–¥ 10 27 29
–û—Å–Ω–æ–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –°—Ç–∞–≤–∫–∞ –°—É–º–º–∞
571404435.63 (375000) 4UZS 1500000 –ë–ù
571404435.63 (58.27) 33500/UZS 19522460 –ë–ù
590286865.63 12 7091227.48 –ë–ù

50 –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –Ω–µ—Å–µ—Ç: –î–∏—Ä–µ–∫—Ç–æ—Ä –ò—Å–ª–æ–º–æ–≤ –£.–ö.

54 –ú–µ—Å—Ç–æ –∏ –¥–∞—Ç–∞: –≥.–¢–∞—à–∫–µ–Ω—Ç
–°–∞–¥–∏–ª–æ–≤ –ö–∞–º–∏–ª—å –ú–∞—Ä–∞—Ç–æ–≤–∏—á
+998916776000
"""

async def test_declaration_auto_fill():
    """Test the complete auto-fill declaration system"""
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–∏—Å—Ç–µ–º—ã –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –î–µ–∫–ª–∞—Ä–∞—Ü–∏–π ===\n")
    
    # Get database session
    db = next(get_db())
    
    # Ensure template exists
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏...")
    template = create_exact_russian_declaration()
    print(f"   ‚úì –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: {template.name}")
    print(f"   ‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(template.fields)}")
    print(f"   ‚úì –ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω: {template.is_active}")
    
    # Initialize declaration generation service
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    declaration_service = DeclarationGenerationService(db)
    print("   ‚úì –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # Test OCR data extraction and auto-fill
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ OCR —Ç–µ–∫—Å—Ç–∞...")
    try:
        result = await declaration_service.generate_declaration_from_ocr(
            SAMPLE_DECLARATION_TEXT, 
            template.id
        )
        
        print("   ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   ‚úì –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"     - –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {result['statistics']['total_fields']}")
        print(f"     - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {result['statistics']['filled_fields']}")
        print(f"     - –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {result['statistics']['completion_percentage']}%")
        print(f"     - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['statistics']['high_confidence_fields']} –ø–æ–ª–µ–π")
        print(f"     - –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {result['statistics']['extraction_method']}")
        
        # Show some extracted data samples
        print(f"\n4. –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        extracted_data = result['extracted_data']
        
        sample_fields = [
            ('sender_exporter', '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä'),
            ('recipient_importer', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ò–º–ø–æ—Ä—Ç–µ—Ä'),
            ('declarant_representative', '–î–µ–∫–ª–∞—Ä–∞–Ω—Ç/–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å'),
            ('dispatch_country', '–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
            ('customs_value', '–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å'),
            ('transport_identity_departure', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
            ('commodity_code', '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞'),
            ('gross_mass', '–í–µ—Å –±—Ä—É—Ç—Ç–æ'),
            ('reference_number', '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä'),
            ('responsible_person', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ')
        ]
        
        for field_key, field_name in sample_fields:
            if field_key in extracted_data:
                value = extracted_data[field_key]
                confidence_key = f"{field_key}_confidence"
                confidence = extracted_data.get(confidence_key, 0.0)
                confidence_pct = int(confidence * 100) if confidence else 0
                print(f"   ‚úì {field_name}: {value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_pct}%)")
        
        print(f"\n5. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        
        # Count high confidence fields
        high_conf_count = 0
        medium_conf_count = 0
        low_conf_count = 0
        
        for key, value in extracted_data.items():
            if key.endswith('_confidence'):
                if value > 0.8:
                    high_conf_count += 1
                elif value > 0.6:
                    medium_conf_count += 1
                else:
                    low_conf_count += 1
        
        print(f"   ‚úì –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (>80%): {high_conf_count} –ø–æ–ª–µ–π")
        print(f"   ‚úì –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (60-80%): {medium_conf_count} –ø–æ–ª–µ–π")
        print(f"   ‚úì –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (<60%): {low_conf_count} –ø–æ–ª–µ–π")
        
        print(f"\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ:")
        
        # Check critical fields from the declaration
        critical_fields = {
            'sender_exporter': 'GIGAFLEX ASIA LIMITED',
            'recipient_importer': 'GAZ-NEFT-AVTO BENZIN',
            'dispatch_country': '–ö–ê–ó–ê–•–°–¢–ê–ù',
            'customs_value': '45105.63',
            'commodity_code': '2710124500',
            'gross_mass': '58276',
            'transport_identity_departure': '–ñ–î 73054884'
        }
        
        matches = 0
        for field_key, expected_value in critical_fields.items():
            extracted_value = extracted_data.get(field_key, '')
            if expected_value.lower() in extracted_value.lower():
                matches += 1
                print(f"   ‚úì {field_key}: –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢")
            else:
                print(f"   ‚ö† {field_key}: –ù–ï –ù–ê–ô–î–ï–ù–û –∏–ª–∏ –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢")
        
        accuracy_percentage = (matches / len(critical_fields)) * 100
        print(f"\n   üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π: {accuracy_percentage:.1f}%")
        
        if accuracy_percentage >= 80:
            print("   üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif accuracy_percentage >= 60:
            print("   ‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê - –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
        
        return result
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        raise

async def main():
    """Main test function"""
    try:
        result = await test_declaration_auto_fill()
        
        print(f"\n" + "="*60)
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print("="*60)
        print(f"‚úì –®–∞–±–ª–æ–Ω —Å 54 –ø–æ–ª—è–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        print(f"‚úì OCR —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å Google Vision API")
        print(f"‚úì –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {result['statistics']['completion_percentage']}%")
        print(f"‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        print(f"‚úì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print(f"‚úì API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≥–æ—Ç–æ–≤—ã")
        print(f"‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω")
        
        print(f"\n–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï! üöÄ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())